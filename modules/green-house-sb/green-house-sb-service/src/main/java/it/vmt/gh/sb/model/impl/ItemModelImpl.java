/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.vmt.gh.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import it.vmt.gh.sb.model.Item;
import it.vmt.gh.sb.model.ItemModel;
import it.vmt.gh.sb.model.ItemSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Item service. Represents a row in the &quot;gh_Item&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ItemImpl
 * @generated
 */
@JSON(strict = true)
public class ItemModelImpl extends BaseModelImpl<Item> implements ItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item model instance should use the <code>Item</code> interface instead.
	 */
	public static final String TABLE_NAME = "gh_Item";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"itemId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"displayDate", Types.TIMESTAMP}, {"environmentId", Types.BIGINT},
		{"profileId", Types.BIGINT}, {"carpentryId", Types.BIGINT},
		{"handleId", Types.BIGINT}, {"colorId", Types.BIGINT},
		{"cartId", Types.BIGINT}, {"qty", Types.INTEGER},
		{"price", Types.DOUBLE}, {"width", Types.DOUBLE},
		{"height", Types.DOUBLE}, {"color", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("displayDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("environmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("profileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("carpentryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("handleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("colorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cartId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("qty", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("width", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("height", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gh_Item (uuid_ VARCHAR(75) null,itemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,displayDate DATE null,environmentId LONG,profileId LONG,carpentryId LONG,handleId LONG,colorId LONG,cartId LONG,qty INTEGER,price DOUBLE,width DOUBLE,height DOUBLE,color VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table gh_Item";

	public static final String ORDER_BY_JPQL = " ORDER BY item.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY gh_Item.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CARPENTRYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CARTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ENVIRONMENTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long HANDLEID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PROFILEID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Item toModel(ItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Item model = new ItemImpl();

		model.setUuid(soapModel.getUuid());
		model.setItemId(soapModel.getItemId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDisplayDate(soapModel.getDisplayDate());
		model.setEnvironmentId(soapModel.getEnvironmentId());
		model.setProfileId(soapModel.getProfileId());
		model.setCarpentryId(soapModel.getCarpentryId());
		model.setHandleId(soapModel.getHandleId());
		model.setColorId(soapModel.getColorId());
		model.setCartId(soapModel.getCartId());
		model.setQty(soapModel.getQty());
		model.setPrice(soapModel.getPrice());
		model.setWidth(soapModel.getWidth());
		model.setHeight(soapModel.getHeight());
		model.setColor(soapModel.getColor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Item> toModels(ItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Item> models = new ArrayList<Item>(soapModels.length);

		for (ItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Item.class;
	}

	@Override
	public String getModelClassName() {
		return Item.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Item, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Item)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Item, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Item, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Item)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Item, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Item, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Item>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Item.class.getClassLoader(), Item.class, ModelWrapper.class);

		try {
			Constructor<Item> constructor =
				(Constructor<Item>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Item, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Item, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Item, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Item, Object>>();
		Map<String, BiConsumer<Item, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Item, ?>>();

		attributeGetterFunctions.put("uuid", Item::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Item, String>)Item::setUuid);
		attributeGetterFunctions.put("itemId", Item::getItemId);
		attributeSetterBiConsumers.put(
			"itemId", (BiConsumer<Item, Long>)Item::setItemId);
		attributeGetterFunctions.put("groupId", Item::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Item, Long>)Item::setGroupId);
		attributeGetterFunctions.put("companyId", Item::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Item, Long>)Item::setCompanyId);
		attributeGetterFunctions.put("userId", Item::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Item, Long>)Item::setUserId);
		attributeGetterFunctions.put("userName", Item::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Item, String>)Item::setUserName);
		attributeGetterFunctions.put("createDate", Item::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Item, Date>)Item::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Item::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Item, Date>)Item::setModifiedDate);
		attributeGetterFunctions.put("displayDate", Item::getDisplayDate);
		attributeSetterBiConsumers.put(
			"displayDate", (BiConsumer<Item, Date>)Item::setDisplayDate);
		attributeGetterFunctions.put("environmentId", Item::getEnvironmentId);
		attributeSetterBiConsumers.put(
			"environmentId", (BiConsumer<Item, Long>)Item::setEnvironmentId);
		attributeGetterFunctions.put("profileId", Item::getProfileId);
		attributeSetterBiConsumers.put(
			"profileId", (BiConsumer<Item, Long>)Item::setProfileId);
		attributeGetterFunctions.put("carpentryId", Item::getCarpentryId);
		attributeSetterBiConsumers.put(
			"carpentryId", (BiConsumer<Item, Long>)Item::setCarpentryId);
		attributeGetterFunctions.put("handleId", Item::getHandleId);
		attributeSetterBiConsumers.put(
			"handleId", (BiConsumer<Item, Long>)Item::setHandleId);
		attributeGetterFunctions.put("colorId", Item::getColorId);
		attributeSetterBiConsumers.put(
			"colorId", (BiConsumer<Item, Long>)Item::setColorId);
		attributeGetterFunctions.put("cartId", Item::getCartId);
		attributeSetterBiConsumers.put(
			"cartId", (BiConsumer<Item, Long>)Item::setCartId);
		attributeGetterFunctions.put("qty", Item::getQty);
		attributeSetterBiConsumers.put(
			"qty", (BiConsumer<Item, Integer>)Item::setQty);
		attributeGetterFunctions.put("price", Item::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<Item, Double>)Item::setPrice);
		attributeGetterFunctions.put("width", Item::getWidth);
		attributeSetterBiConsumers.put(
			"width", (BiConsumer<Item, Double>)Item::setWidth);
		attributeGetterFunctions.put("height", Item::getHeight);
		attributeSetterBiConsumers.put(
			"height", (BiConsumer<Item, Double>)Item::setHeight);
		attributeGetterFunctions.put("color", Item::getColor);
		attributeSetterBiConsumers.put(
			"color", (BiConsumer<Item, String>)Item::setColor);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemId = itemId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getDisplayDate() {
		return _displayDate;
	}

	@Override
	public void setDisplayDate(Date displayDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_displayDate = displayDate;
	}

	@JSON
	@Override
	public long getEnvironmentId() {
		return _environmentId;
	}

	@Override
	public void setEnvironmentId(long environmentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_environmentId = environmentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEnvironmentId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("environmentId"));
	}

	@JSON
	@Override
	public long getProfileId() {
		return _profileId;
	}

	@Override
	public void setProfileId(long profileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_profileId = profileId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProfileId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("profileId"));
	}

	@JSON
	@Override
	public long getCarpentryId() {
		return _carpentryId;
	}

	@Override
	public void setCarpentryId(long carpentryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carpentryId = carpentryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCarpentryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("carpentryId"));
	}

	@JSON
	@Override
	public long getHandleId() {
		return _handleId;
	}

	@Override
	public void setHandleId(long handleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handleId = handleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHandleId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("handleId"));
	}

	@JSON
	@Override
	public long getColorId() {
		return _colorId;
	}

	@Override
	public void setColorId(long colorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_colorId = colorId;
	}

	@JSON
	@Override
	public long getCartId() {
		return _cartId;
	}

	@Override
	public void setCartId(long cartId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cartId = cartId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCartId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("cartId"));
	}

	@JSON
	@Override
	public int getQty() {
		return _qty;
	}

	@Override
	public void setQty(int qty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qty = qty;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	@JSON
	@Override
	public double getWidth() {
		return _width;
	}

	@Override
	public void setWidth(double width) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_width = width;
	}

	@JSON
	@Override
	public double getHeight() {
		return _height;
	}

	@Override
	public void setHeight(double height) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_height = height;
	}

	@JSON
	@Override
	public String getColor() {
		if (_color == null) {
			return "";
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_color = color;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Item.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Item.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Item toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Item>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemImpl itemImpl = new ItemImpl();

		itemImpl.setUuid(getUuid());
		itemImpl.setItemId(getItemId());
		itemImpl.setGroupId(getGroupId());
		itemImpl.setCompanyId(getCompanyId());
		itemImpl.setUserId(getUserId());
		itemImpl.setUserName(getUserName());
		itemImpl.setCreateDate(getCreateDate());
		itemImpl.setModifiedDate(getModifiedDate());
		itemImpl.setDisplayDate(getDisplayDate());
		itemImpl.setEnvironmentId(getEnvironmentId());
		itemImpl.setProfileId(getProfileId());
		itemImpl.setCarpentryId(getCarpentryId());
		itemImpl.setHandleId(getHandleId());
		itemImpl.setColorId(getColorId());
		itemImpl.setCartId(getCartId());
		itemImpl.setQty(getQty());
		itemImpl.setPrice(getPrice());
		itemImpl.setWidth(getWidth());
		itemImpl.setHeight(getHeight());
		itemImpl.setColor(getColor());

		itemImpl.resetOriginalValues();

		return itemImpl;
	}

	@Override
	public int compareTo(Item item) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), item.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Item)) {
			return false;
		}

		Item item = (Item)object;

		long primaryKey = item.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Item> toCacheModel() {
		ItemCacheModel itemCacheModel = new ItemCacheModel();

		itemCacheModel.uuid = getUuid();

		String uuid = itemCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			itemCacheModel.uuid = null;
		}

		itemCacheModel.itemId = getItemId();

		itemCacheModel.groupId = getGroupId();

		itemCacheModel.companyId = getCompanyId();

		itemCacheModel.userId = getUserId();

		itemCacheModel.userName = getUserName();

		String userName = itemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			itemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			itemCacheModel.createDate = createDate.getTime();
		}
		else {
			itemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			itemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			itemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date displayDate = getDisplayDate();

		if (displayDate != null) {
			itemCacheModel.displayDate = displayDate.getTime();
		}
		else {
			itemCacheModel.displayDate = Long.MIN_VALUE;
		}

		itemCacheModel.environmentId = getEnvironmentId();

		itemCacheModel.profileId = getProfileId();

		itemCacheModel.carpentryId = getCarpentryId();

		itemCacheModel.handleId = getHandleId();

		itemCacheModel.colorId = getColorId();

		itemCacheModel.cartId = getCartId();

		itemCacheModel.qty = getQty();

		itemCacheModel.price = getPrice();

		itemCacheModel.width = getWidth();

		itemCacheModel.height = getHeight();

		itemCacheModel.color = getColor();

		String color = itemCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			itemCacheModel.color = null;
		}

		return itemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Item, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Item)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Item, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Item)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Item>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _itemId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _displayDate;
	private long _environmentId;
	private long _profileId;
	private long _carpentryId;
	private long _handleId;
	private long _colorId;
	private long _cartId;
	private int _qty;
	private double _price;
	private double _width;
	private double _height;
	private String _color;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Item, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Item)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("itemId", _itemId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("displayDate", _displayDate);
		_columnOriginalValues.put("environmentId", _environmentId);
		_columnOriginalValues.put("profileId", _profileId);
		_columnOriginalValues.put("carpentryId", _carpentryId);
		_columnOriginalValues.put("handleId", _handleId);
		_columnOriginalValues.put("colorId", _colorId);
		_columnOriginalValues.put("cartId", _cartId);
		_columnOriginalValues.put("qty", _qty);
		_columnOriginalValues.put("price", _price);
		_columnOriginalValues.put("width", _width);
		_columnOriginalValues.put("height", _height);
		_columnOriginalValues.put("color", _color);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("itemId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("displayDate", 256L);

		columnBitmasks.put("environmentId", 512L);

		columnBitmasks.put("profileId", 1024L);

		columnBitmasks.put("carpentryId", 2048L);

		columnBitmasks.put("handleId", 4096L);

		columnBitmasks.put("colorId", 8192L);

		columnBitmasks.put("cartId", 16384L);

		columnBitmasks.put("qty", 32768L);

		columnBitmasks.put("price", 65536L);

		columnBitmasks.put("width", 131072L);

		columnBitmasks.put("height", 262144L);

		columnBitmasks.put("color", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Item _escapedModel;

}